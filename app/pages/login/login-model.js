"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var frame_1 = require("tns-core-modules/ui/frame");
var http_1 = require("tns-core-modules/http");
var Toast = require("nativescript-toasts");
var localStorage = require("nativescript-localstorage");
var loginModel = /** @class */ (function (_super) {
    __extends(loginModel, _super);
    function loginModel() {
        var _this = _super.call(this) || this;
        _this.username = "";
        _this.password = "";
        return _this;
    }
    loginModel.prototype.loginUser = function () {
        var getUsername = this.username;
        var getPassword = this.password;
        this.apiCallLogin(getUsername, getPassword);
    };
    loginModel.prototype.apiCallLogin = function (username_fetch, password_fetch) {
        var _this = this;
        var url = "http://10.20.3.195:5400/user/login";
        var postData = {
            "email": username_fetch,
            "password": password_fetch
        };
        http_1.request({
            url: url,
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify(postData)
        }).then(function (response) {
            var result = response.content.toJSON();
            console.log(postData);
            console.log(result);
            localStorage.setItem("userData", JSON.stringify(result));
            _this.showtoastandNavigate(result.message);
            setTimeout(function () {
                _this.set("username", "");
                _this.set("password", "");
                _this.navigateToListing();
            }, 1000);
        }, function (e) {
            console.log(JSON.stringify(e));
        });
    };
    loginModel.prototype.showtoastandNavigate = function (message) {
        var toastOptions = {
            text: message,
            duration: Toast.DURATION.SHORT,
            position: Toast.POSITION.CENTER
        };
        Toast.show(toastOptions);
        // Toast.makeText(message).show();
    };
    loginModel.prototype.navigateToListing = function () {
        var frame = frame_1.getFrameById("firstFrame");
        frame.navigate("pages/listing/listing-page");
    };
    loginModel.prototype.register = function () {
        var frame = frame_1.getFrameById("firstFrame");
        frame.navigate("pages/register/register-page");
    };
    return loginModel;
}(observable_1.Observable));
exports.default = loginModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUEyQztBQUMzQyxtREFBeUQ7QUFDekQsOENBQStDO0FBQy9DLDJDQUE2QztBQUM3QyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUV4RDtJQUF5Qiw4QkFBVTtJQUsvQjtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQUxELGNBQVEsR0FBSyxFQUFFLENBQUM7UUFDaEIsY0FBUSxHQUFLLEVBQUUsQ0FBQzs7SUFJaEIsQ0FBQztJQUVELDhCQUFTLEdBQVQ7UUFDSSxJQUFJLFdBQVcsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLElBQUksV0FBVyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGlDQUFZLEdBQVosVUFBYSxjQUFjLEVBQUMsY0FBYztRQUExQyxpQkF5QkM7UUF4QkcsSUFBSSxHQUFHLEdBQUMsb0NBQW9DLENBQUM7UUFDN0MsSUFBSSxRQUFRLEdBQUM7WUFDVCxPQUFPLEVBQUUsY0FBYztZQUN2QixVQUFVLEVBQUMsY0FBYztTQUM1QixDQUFBO1FBQ0QsY0FBTyxDQUFDO1lBQ0osR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtZQUMvQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDcEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQVE7WUFDYixJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDekQsS0FBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxVQUFVLENBQUM7Z0JBQ1AsS0FBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3hCLEtBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QixLQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM3QixDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixDQUFDLEVBQUUsVUFBQyxDQUFDO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQseUNBQW9CLEdBQXBCLFVBQXFCLE9BQU87UUFDeEIsSUFBSSxZQUFZLEdBQXNCO1lBQ2xDLElBQUksRUFBRSxPQUFPO1lBQ2IsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSztZQUM5QixRQUFRLEVBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNO1NBQ2pDLENBQUM7UUFDRixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pCLGtDQUFrQztJQUN0QyxDQUFDO0lBRUQsc0NBQWlCLEdBQWpCO1FBQ0ksSUFBTSxLQUFLLEdBQUcsb0JBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6QyxLQUFLLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELDZCQUFRLEdBQVI7UUFDSSxJQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBbUNMLGlCQUFDO0FBQUQsQ0FBQyxBQS9GRCxDQUF5Qix1QkFBVSxHQStGbEM7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGdldEZyYW1lQnlJZCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCI7XG5pbXBvcnQgeyByZXF1ZXN0fSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9odHRwXCI7XG5pbXBvcnQgKiBhcyBUb2FzdCBmcm9tICduYXRpdmVzY3JpcHQtdG9hc3RzJztcbnZhciBsb2NhbFN0b3JhZ2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWxvY2Fsc3RvcmFnZVwiKTtcblxuY2xhc3MgbG9naW5Nb2RlbCBleHRlbmRzIE9ic2VydmFibGV7XG5cbiAgICB1c2VybmFtZTphbnk9XCJcIjtcbiAgICBwYXNzd29yZDphbnk9XCJcIjtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgbG9naW5Vc2VyKCl7XG4gICAgICAgIGxldCBnZXRVc2VybmFtZT10aGlzLnVzZXJuYW1lO1xuICAgICAgICBsZXQgZ2V0UGFzc3dvcmQ9dGhpcy5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5hcGlDYWxsTG9naW4oZ2V0VXNlcm5hbWUsZ2V0UGFzc3dvcmQpO1xuICAgIH1cblxuICAgIGFwaUNhbGxMb2dpbih1c2VybmFtZV9mZXRjaCxwYXNzd29yZF9mZXRjaCl7XG4gICAgICAgIGxldCB1cmw9XCJodHRwOi8vMTAuMjAuMy4xOTU6NTQwMC91c2VyL2xvZ2luXCI7XG4gICAgICAgIHZhciBwb3N0RGF0YT17XG4gICAgICAgICAgICBcImVtYWlsXCI6IHVzZXJuYW1lX2ZldGNoLFxuICAgICAgICAgICAgXCJwYXNzd29yZFwiOnBhc3N3b3JkX2ZldGNoXG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeShwb3N0RGF0YSlcbiAgICAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLmNvbnRlbnQudG9KU09OKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwb3N0RGF0YSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyRGF0YVwiLCBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd3RvYXN0YW5kTmF2aWdhdGUocmVzdWx0Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidXNlcm5hbWVcIixcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInBhc3N3b3JkXCIsXCJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvTGlzdGluZygpO1xuICAgICAgICAgICAgfSwxMDAwKTtcbiAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvd3RvYXN0YW5kTmF2aWdhdGUobWVzc2FnZSl7XG4gICAgICAgIGxldCB0b2FzdE9wdGlvbnM6VG9hc3QuVG9hc3RPcHRpb25zID0ge1xuICAgICAgICAgICAgdGV4dDogbWVzc2FnZSwgXG4gICAgICAgICAgICBkdXJhdGlvbjogVG9hc3QuRFVSQVRJT04uU0hPUlQsXG4gICAgICAgICAgICBwb3NpdGlvbjpUb2FzdC5QT1NJVElPTi5DRU5URVJcbiAgICAgICAgfTtcbiAgICAgICAgVG9hc3Quc2hvdyh0b2FzdE9wdGlvbnMpO1xuICAgICAgICAvLyBUb2FzdC5tYWtlVGV4dChtZXNzYWdlKS5zaG93KCk7XG4gICAgfVxuXG4gICAgbmF2aWdhdGVUb0xpc3RpbmcoKXtcbiAgICAgICAgY29uc3QgZnJhbWUgPSBnZXRGcmFtZUJ5SWQoXCJmaXJzdEZyYW1lXCIpO1xuICAgICAgICBmcmFtZS5uYXZpZ2F0ZShcInBhZ2VzL2xpc3RpbmcvbGlzdGluZy1wYWdlXCIpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyKCl7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gZ2V0RnJhbWVCeUlkKFwiZmlyc3RGcmFtZVwiKTtcbiAgICAgICAgZnJhbWUubmF2aWdhdGUoXCJwYWdlcy9yZWdpc3Rlci9yZWdpc3Rlci1wYWdlXCIpO1xuICAgIH1cbiAgICBcbiAgICAvLyBnZXRSZXF1ZXN0KCkge1xuICAgIC8vICAgICBmZXRjaChcImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2Rvcy8xXCIsIHtcbiAgICAvLyAgICAgICAgIG1ldGhvZDogXCJHRVRcIlxuICAgIC8vICAgICB9KVxuICAgIC8vICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIC8vICAgICAgICAgYWxlcnQoe3RpdGxlOiBcIkdFVCBSZXNwb25zZVwiLCBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShyZXNwb25zZSksIG9rQnV0dG9uVGV4dDogXCJDbG9zZVwifSk7XG4gICAgLy8gICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgIC8vICAgICB9KVxuICAgIC8vIH1cblxuICAgIC8vIHBvc3RSZXF1ZXN0KCkge1xuICAgIC8vICAgICB2YXIgdXJsPVwiaHR0cHM6Ly9yZXFyZXMuaW4vYXBpL2xvZ2luXCI7XG4gICAgLy8gICAgIHZhciBwb3N0RGF0YT17XG4gICAgLy8gICAgICAgICBcImVtYWlsXCI6IFwicGV0ZXJAa2xhdmVuXCIsXG4gICAgLy8gICAgICAgICBcInBhc3N3b3JkXCI6IFwiY2l0eXNsaWNrYVwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgLy92YXIgdXJsPVwiaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vdGVzdFwiXG4gICAgLy8gICAgIC8vIHZhciBwb3N0RGF0YT17XG4gICAgLy8gICAgIC8vICAgICB1c2VybmFtZTogXCJucmFib3lcIixcbiAgICAvLyAgICAgLy8gICAgIGZpcnN0bmFtZTogXCJOaWNcIixcbiAgICAvLyAgICAgLy8gICAgIGxhc3RuYW1lOiBcIlJhYm95XCIsXG4gICAgLy8gICAgIC8vIH1cbiAgICAvLyAgICAgZmV0Y2godXJsLCB7XG4gICAgLy8gICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIC8vICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpXG4gICAgLy8gICAgIH0pXG4gICAgLy8gICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgLy8gICAgICAgICBhbGVydCh7dGl0bGU6IFwiUE9TVCBSZXNwb25zZVwiLCBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShyZXNwb25zZSksIG9rQnV0dG9uVGV4dDogXCJDbG9zZVwifSk7XG4gICAgLy8gICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgIC8vICAgICB9KVxuICAgIC8vIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9naW5Nb2RlbDsiXX0=